{"version":3,"sources":["img/DHMZlogo.png","img/openweather-logo.png","Components/Header.js","Components/WeatherCard.js","Components/SearchBar.js","Components/Footer.js","Components/WeatherCardsContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","style","backgroundColor","height","display","flexFlow","alignItems","src","require","alt","color","lineHeight","paddingLeft","WeatherCard","_ref","day","date","image","temperature","humidity","wind","pressure","_useState","useState","_useState2","Object","slicedToArray","isHovered","setState","toggleCard","tempCelsius","Math","round","windSpeed","airPressure","onMouseEnter","onMouseLeave","fontSize","SearchBar","handleCitySearch","handleInputChange","inputValue","onSubmit","type","placeholder","value","name","onChange","Footer","paddingTop","marginTop","WeatherCardsContainer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","fiveDayForecast","cityList","cityID","cityName","bind","assertThisInitialized","event","target","e","preventDefault","i","length","toLowerCase","id","fetchWeatherForecast","_this2","arguments","undefined","fetch","concat","then","res","json","result","list","city","error","_this3","filter","item","Date","dt_txt","getHours","map","index","itemDate","itemMonth","getMonth","itemDay","getDay","itemWeatherImg","weather","icon","WeatherCardDate","substring","key","description","main","temp","speed","renderCardBody","React","Component","App","Components_Header","Components_WeatherCardsContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc0be042.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DHMZlogo.2411d418.png\";","module.exports = __webpack_public_path__ + \"static/media/openweather-logo.58f2f1fb.png\";","import React from 'react';\r\n\r\nfunction Header() {\r\n  const titleStyling = {\r\n  color: '#fff',\r\n  lineHeight: 0.8,\r\n  paddingLeft: '10px'\r\n}\r\nconst headerStyling = {\r\n  height: '20vh',\r\n  display: 'flex',\r\n  flexFlow: 'row nowrap',\r\n  alignItems: 'center',\r\n  backgroundColor: '#F78733'\r\n\r\n  }\r\n  return (\r\n    <header className=\"container-fluid\" style={{ backgroundColor: '#F78733'}}>\r\n      <div className=\"container\">\r\n        <header style={headerStyling}>\r\n          <img style={{height: '60px'}}src={require(\"../img/DHMZlogo.png\")} alt=\"DHMZ logo\"/>\r\n          <h1 style={titleStyling}>Državni hidrometeorološki zavod</h1>\r\n        </header>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\n\r\n\r\nexport default function WeatherCard({ day, date, image, alt, temperature, humidity, wind, pressure}) {\r\n  const [isHovered, setState] = useState(false);\r\n\r\n  function toggleCard() {\r\n  isHovered ? setState(false) : setState(true)\r\n  }\r\n\r\n\r\n  const tempCelsius = Math.round(temperature);\r\n  const windSpeed = Math.round(wind * 3.6);\r\n  const airPressure = Math.round(pressure);\r\n  const dayStyling = {\r\n    color: '#FC4A1A',\r\n    fontSize: '20px'\r\n  }\r\n\r\n  return (  \r\n    <div onMouseEnter={toggleCard} onMouseLeave={toggleCard} className='weather-card'> {isHovered ?\r\n    <div>\r\n      <p>Vlaga: {humidity}%</p>\r\n      <p>Vjetar: {windSpeed} km/h</p>\r\n      <p>Tlak zraka: {airPressure} hPa</p>\r\n      </div>\r\n     :\r\n      <div>\r\n      <p style={dayStyling} className=\"h-text-center\">{day}</p>\r\n      <p className=\"h-text-center\">{date}</p>\r\n      <div className=\"h-flex\">\r\n      <img src={image} alt={alt}/>\r\n      <span className=\"temperature\"> {tempCelsius + '°'}</span>\r\n      </div>\r\n      </div> \r\n      }\r\n     </div>\r\n\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function SearchBar({handleCitySearch, handleInputChange, inputValue}) {\r\n  return (\r\n    <div>\r\n      <div className=\"searchBar h-text-center\">\r\n        <form onSubmit={handleCitySearch}>\r\n          <input type=\"text\" placeholder=\"Upišite ime grada\" value={inputValue} name=\"CitySearch\" onChange={handleInputChange} />\r\n          <button type=\"submit\" className=\"btn\">Dohvati podatke</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n\r\nconst footerStyling = {\r\n  backgroundColor: '#4ABDAC',\r\n  color: '#fff',\r\n  height: '20vh',\r\n  paddingTop: '50px',\r\n  marginTop: '150px'\r\n}\r\n\r\n  return (\r\n    <footer className=\"container-fluid\" style={footerStyling}>\r\n      <div className=\"container\">\r\n        <p className=\"h-flex\">Powered by <img style={{height: '50px', paddingLeft: '15px'}}src={require(\"../img/openweather-logo.png\")} alt=\"Openweather logo\"/></p>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport WeatherCard from './WeatherCard'\r\nimport SearchBar from './SearchBar'\r\nimport Footer from './Footer'\r\n\r\nclass WeatherCardsContainer extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      isLoaded: false,\r\n      fiveDayForecast: [],\r\n      cityList: [],\r\n      cityID: '',\r\n      inputValue: '',\r\n      cityName: '',\r\n      isHovered: []\r\n    }\r\n    this.handleCitySearch= this.handleCitySearch.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    this.setState({\r\n      inputValue: event.target.value\r\n    });\r\n  }\r\n\r\n\r\n  handleCitySearch(e){\r\n    e.preventDefault();\r\n    for(let i = 0; i < this.state.cityList.length; i++){\r\n      if(this.state.cityList[i].name.toLowerCase() === this.state.inputValue.toLowerCase()){\r\n        let id = this.state.cityList[i].id\r\n        this.fetchWeatherForecast(id);\r\n      }\r\n    }\r\n  }\r\n\r\n  fetchWeatherForecast(id=3186886) {\r\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=a81d261e96501eaaef28ec3ec56f3ea5&units=metric`)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          fiveDayForecast: result.list,\r\n          cityID: id,\r\n          cityName: result.city.name\r\n        })\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchWeatherForecast();\r\n    fetch('./city-list.json')\r\n      .then(res =>res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            cityList: result\r\n          })\r\n          },\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error\r\n            });\r\n          }\r\n        )\r\n    }\r\n\r\n    renderCardBody() {\r\n      const filteredDays =  this.state.fiveDayForecast.filter((item) => {\r\n        const itemDate = new Date(item.dt_txt);\r\n        return itemDate.getHours()  === 12 \r\n      })  \r\n\r\n\r\n      return filteredDays.map((item, index) => {\r\n          const days = ['Nedjelja','Ponedjeljak','Utorak','Srijeda','Četvrtak','Petak','Subota'];\r\n          const months = ['siječnja', 'veljače', 'ožujka', 'travnja', 'svibnja', 'lipnja', 'srpnja', 'kolovoza', 'rujna', 'listopada', 'studenog', 'prosinca'];\r\n          const itemDate = new Date(item.dt_txt);\r\n          const itemMonth = months[ itemDate.getMonth()];\r\n          const itemDay = days[ itemDate.getDay() ];\r\n          const itemWeatherImg = 'http://openweathermap.org/img/w/' + item.weather[0].icon + '.png';\r\n          const WeatherCardDate = (item.dt_txt).substring(8, 10) + '. ' + itemMonth;\r\n\r\n          return (\r\n            <WeatherCard \r\n            key={index} \r\n            day={itemDay} \r\n            date={WeatherCardDate} \r\n            image={itemWeatherImg} \r\n            alt={item.weather[0].description} \r\n            temperature={item.main.temp}\r\n            humidity={item.main.humidity}\r\n            wind={item.wind.speed}\r\n            pressure={item.main.pressure}/>\r\n          )\r\n        })\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n        <div className=\"container\">\r\n          <div className=\"h-flex\">\r\n          <h1 className=\"title h-text-center\">Vremenska prognoza za {this.state.cityName}</h1>\r\n          </div>\r\n            <div className=\"h-flex\">\r\n              {this.renderCardBody()}\r\n            </div>\r\n        <SearchBar handleCitySearch={this.handleCitySearch} handleInputChange={this.handleInputChange} inputValue={this.state.inputValue} />\r\n        </div>\r\n        <Footer />\r\n        </div>\r\n          )\r\n      }\r\n  }\r\n\r\nexport default WeatherCardsContainer","import React from 'react';\nimport Header from './Components/Header'\nimport WeatherCardsContainer from './Components/WeatherCardsContainer'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <WeatherCardsContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap-grid.css';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}